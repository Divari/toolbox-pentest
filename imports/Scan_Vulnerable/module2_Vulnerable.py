from googlesearch import search  
import subprocess
import re

def explore_system(ip_address):
    nmap_command = ["nmap", "-O", ip_address]
    scan_result = subprocess.run(nmap_command, capture_output=True, text=True)

    if scan_result.returncode != 0:
        raise Exception(f"Erreur lors de l'exécution de nmap: {scan_result.stderr}")

    return scan_result.stdout

def parse_nmap_os_output(nmap_output):
    system_info = []
    lines = nmap_output.split("\n")
    
    for line in lines:
        match = re.search(r"Running: (.+)", line)
        if match:
            os_description = match.group(1)
            system_info.append({"os": os_description})

    return system_info

def searchforexploit(service_name, html_render=False):
    query = service_name + " exploit vuln"
    search_results = search(query, num=10, stop=10, pause=2)
    result = ""
    spacing = "<br>" if html_render else "\n"
    links = []
    for link in search_results:
        links.append(link)
    
    if not html_render:
        result += f"\n\n===================================\n"
        result += f" Exploits concernant " + service_name
        result += f"\n===================================\n\n"

    for link in links:
        result += f"{link}{spacing}"

    return result

def analyze_system(target_ip):
    nmap_output = explore_system(target_ip)
    system_info = parse_nmap_os_output(nmap_output)
    
    if system_info:
        print()
        print("Informations sur le système d'exploitation détecté:")
        for info in system_info:
            print(f"Système d'exploitation: {info['os']} ")

        insecure_systems = check_system_versions(system_info)
        if insecure_systems:
            print("\nSystèmes d'exploitation non sécurisés détectés:")
            for system in insecure_systems:
                print(f"Système d'exploitation: {system['os']}")
        else:
            print("\nTous les systèmes d'exploitation sont OK.")
    else:
        print("Aucune information sur le système d'exploitation détectée.")
    print(f"------------------------------------------------------------------")

def check_system_versions(system_info):
    insecure_systems = []

    for info in system_info:
        os_description = info["os"].lower()

        found_secure = False
        found_insecure = False

        for key, versions in SECURE_SYSTEMS.items():
            if any(secure in os_description for secure in versions):
                found_secure = True

        for key, versions in NON_SECURE_SYSTEMS.items():
            if any(insecure in os_description for insecure in versions):
                found_insecure = True

        if found_insecure and not found_secure:
            insecure_systems.append(info)

    return insecure_systems    


def scan_ports(ip_address, range_of_ports="1-1024"):
    nmap_command = ["nmap", "-sV", "-p", range_of_ports, ip_address]
    result = subprocess.run(nmap_command, capture_output=True, text=True)

    if result.returncode != 0:
        raise Exception(f"Erreur lors de l'exécution de nmap: {result.stderr}")

    return result.stdout

def parse_port_info(nmap_output):
    port_info = []

    output_lines = nmap_output.split("\n")
    for line in output_lines:
        match = re.match(r"^(\d+/tcp)\s+open\s+(\w+)\s+(.*)", line)
        if match:
            port = match.group(1)
            service_name = match.group(2)
            service_version = match.group(3)
            port_info.append({"port": port, "service": service_name, "version": service_version})

    return port_info

def find_unsafe_services(port_info):
    unsafe_services = []

    for detail in port_info:
        service_name = detail["service"].lower()
        service_version = detail["version"].lower()

        if service_name in SECURE_PROTOCOLS:
            is_secure = any(
                secure_version in service_version for secure_version in SECURE_PROTOCOLS[service_name]
            )
            if not is_secure:
                unsafe_services.append(detail)

        elif service_name in INSECURE_PROTOCOLS:
            is_insecure = any(
                insecure_version in service_version for insecure_version in INSECURE_PROTOCOLS[service_name]
            )
            if is_insecure:
                unsafe_services.append(detail)

    return unsafe_services

def evaluate_ports(ip_address, range_of_ports="1-1024"):
    nmap_output = scan_ports(ip_address, range_of_ports)
    port_info = parse_port_info(nmap_output)

    print("Informations sur les ports ouverts:")
    for detail in port_info:
        print(f"Port: {detail['port']}, Service: {detail['service']}, Version: {detail['version']}")

    unsafe_services = find_unsafe_services(port_info)
    if unsafe_services:
        print("\nServices ou versions non sécurisés détectés:")
        for service in unsafe_services:
            print(f"Port: {service['port']}, Service: {service['service']}, Version: {service['version']}")
    else:
        print("\nTous les services et versions sont OK.")


SECURE_SYSTEMS = {
    "windows": ["windows 10", "windows 11"],
    "linux": ["ubuntu 20.04", "ubuntu 22.04", "debian 10", "debian 11", "rhel 8", "centos 8"],
    "macos": ["macos monterey", "macos ventura"],
}

NON_SECURE_SYSTEMS = {
    "windows": ["windows xp", "windows vista", "windows 7"],
    "linux": ["ubuntu 18.04", "ubuntu 16.04", "debian 9", "centos 7"],
    "macos": ["macos mojave", "macos high sierra"],
}

SECURE_PROTOCOLS = {
    "ftp": ["ftps", "sftp"],
    "ssh": ["ssh-2"],
    "http": ["http/2", "http/1.1"],
    "https": ["tls 1.2", "tls 1.3"],
    "smtp": ["smtps", "smtp avec starttls"],
    "imap": ["imap avec starttls", "imap/ssl"],
    "pop3": ["pop3 avec starttls", "pop3/ssl"],
    "rdp": ["rdp avec nla"],
}

INSECURE_PROTOCOLS = {
    "ftp": ["ftp sans chiffrement"],
    "ssh": ["ssh-1"],
    "http": ["http/1.0"],
    "https": ["ssl 3.0", "tls 1.0", "tls 1.1"],
    "smtp": ["smtp sans chiffrement"],
    "imap": ["imap sans chiffrement"],
    "pop3": ["pop3 sans chiffrement"],
    "telnet": ["telnet"],
    "rdp": ["rdp sans nla"],
}