import subprocess
import re
from datetime import datetime
import nmap
import scapy.all as scapy


def run_os_detection(ip_addr):
    nmap_command = ["nmap", "-O", ip_addr]
    scan_res = subprocess.run(nmap_command, capture_output=True, text=True)

    if scan_res.returncode != 0:
        raise Exception(f"Erreur lors de l'exécution de nmap: {scan_res.stderr}")

    return scan_res.stdout

def extract_os_data(nmap_out):
    os_info = []
    out_lines = nmap_out.split("\n")
    
    for line in out_lines:
        match = re.search(r"Running: (.+)", line)
        if match:
            os_description = match.group(1)
            os_info.append({"os": os_description})

    return os_info

def find_unsafe_os(os_info):
    unsafe_os_list = []

    for info in os_info:
        os_description = info["os"].lower()
        is_safe = False
        is_unsafe = False

        for key, versions in OS_SAFE.items():
            if any(secure_version in os_description for secure_version in versions):
                is_safe = True

        for key, versions in OS_NON_SAFE.items():
            if any(insecure_version in os_description for insecure_version in versions):
                is_unsafe = True

        if is_unsafe and not is_safe:
            unsafe_os_list.append(info)

    return unsafe_os_list

def execute_port_scan(ip_addr):
    ip_addr = str(ip_addr)
    scanner = nmap.PortScanner()
    scan_res = ""
    print(f"[+] Scan commencé à {datetime.now()}\n")
    scanner.scan(ip_addr, '21-443')
    detected_vers = []

    for host in scanner.all_hosts():
        scan_res += f"Host: {host} {scanner[host].hostname()}\n"
        scan_res += f"State: {scanner[host].state()}\n"
        for protocol in scanner[host].all_protocols():
            scan_res += f"---------------------\n"
            scan_res += f"PORT\t\tSTATE\t\tPRODUCT\t\tVERSION\n"
            ports = scanner[host][protocol].keys()
            for port in ports:
                if len(str(port) + str("/") + str(protocol)) < 8:
                    spacing = "\t\t"
                else:
                    spacing = "\t"
                product = scanner[host][protocol][port]['product']
                version = scanner[host][protocol][port]['version']
                state = scanner[host][protocol][port]['state']
                scan_res += f"{port}/{protocol}{spacing}{state}\t\t{product}\t\t{version}\n"
                if product and product.strip():
                    detected_vers.append(f"{product} {version}")

            detected_vers = [v for v in detected_vers if v.strip()]
            if not detected_vers:
                detected_vers.append("Aucune version trouvée")

    return scan_res, detected_vers

def perform_custom_port_scan(ip_addr, start_port=21, end_port=443):
    ip_addr = str(ip_addr)
    scanner = nmap.PortScanner()
    scan_res = ""
    print(f"[+] Début de la numérisation à {datetime.now()}\n")
    port_range = f"{start_port}-{end_port}"
    scanner.scan(ip_addr, port_range)
    detected_vers = []

    for host in scanner.all_hosts():
        scan_res += f"Hôte: {host} {scanner[host].hostname()}\n"
        scan_res += f"État: {scanner[host].state()}\n"
        for protocol in scanner[host].all_protocols():
            scan_res += f"---------------------\n"
            scan_res += f"PORT\t\tÉTAT\t\tPRODUIT\t\tVERSION\n"
            ports = scanner[host][protocol].keys()
            for port in ports:
                if len(str(port) + str("/") + str(protocol)) < 8:
                    spacing = "\t\t"
                else:
                    spacing = "\t"
                product = scanner[host][protocol][port]['product']
                version = scanner[host][protocol][port]['version']
                state = scanner[host][protocol][port]['state']
                scan_res += f"{port}/{protocol}{spacing}{state}\t\t{product}\t\t{version}\n"
                if product and product.strip():
                    detected_vers.append(f"{product} {version}")

            detected_vers = [v for v in detected_vers if v.strip()]
            if not detected_vers:
                detected_vers.append("Aucune version trouvée")

    return scan_res, detected_vers

def network_scan(target_ip):
    devices = detect_network_devices(target_ip)

    if devices:
        print("\nAnalyse des systèmes d'exploitation en cours...")
        print("------------------------------------------------------------------")
        print("Informations sur les systèmes d'exploitation détectés:")

        for device in devices:
            ip_address = device["ip"]
            print(f"\nAdresse IP: {ip_address}")
            
            try:
                nmap_output = run_os_detection(ip_address)
                os_details = extract_os_data(nmap_output)
                
                if os_details:
                    for info in os_details:
                        print(f"Système d'exploitation: {info['os']} ")

                    unsafe_os_list = find_unsafe_os(os_details)
                    if unsafe_os_list:
                        print("\nSystèmes d'exploitation non sécurisés détectés:")
                        for os in unsafe_os_list:
                            print(f"Système d'exploitation: {os['os']}")

                else:
                    print("Aucune information sur le système d'exploitation détectée.")
            except Exception as error:
                print(f"Erreur lors de l'analyse du système d'exploitation pour l'adresse IP {ip_address}: {error}")

    else:
        print("Aucun périphérique trouvé sur le réseau.")
    print("------------------------------------------------------------------")


def detect_network_devices(ip_range):
    arp_req = scapy.ARP(pdst=ip_range)
    broadcast_frame = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_req_broadcast = broadcast_frame/arp_req
    answered_pkts = scapy.srp(arp_req_broadcast, timeout=1, verbose=False)[0]

    devices_lst = []

    for element in answered_pkts:
        device_info = {"ip": element[1].psrc, "mac": element[1].hwsrc}
        devices_lst.append(device_info)
    return devices_lst


OS_SAFE = {
    "windows": ["windows 10", "windows 11"],
    "linux": ["ubuntu 20.04", "ubuntu 22.04", "debian 10", "debian 11", "rhel 8", "centos 8"],
    "macos": ["macos monterey", "macos ventura"],
}

OS_NON_SAFE = {
    "windows": ["windows xp", "windows vista", "windows 7"],
    "linux": ["ubuntu 18.04", "ubuntu 16.04", "debian 9", "centos 7"],
    "macos": ["macos mojave", "macos high sierra"],
}
