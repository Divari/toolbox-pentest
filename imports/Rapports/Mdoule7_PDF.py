import re
import paramiko
import scapy.all as scapy
import subprocess
from fpdf import FPDF
from colorama import Fore, Back, Style
from datetime import datetime

def rechercher_os(ip_address):
    nmap_command = ["nmap", "-O", ip_address]
    result = subprocess.run(nmap_command, capture_output=True, text=True)
    if result.returncode != 0:
        raise Exception(f"Erreur lors de l'exécution de nmap: {result.stderr}")
    return result.stdout

def analyser_resultats_nmap_os(nmap_output):
    os_info = []
    lines = nmap_output.split("\n")
    for line in lines:
        match = re.search(r"Running: (.+)", line)
        if match:
            os_description = match.group(1)
            os_info.append({"os": os_description})
    return os_info

def scanner_réseau(ip_range):
    arp_request = scapy.ARP(pdst=ip_range)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast/arp_request
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
    clients_list = [{"ip": element[1].psrc, "mac": element[1].hwsrc} for element in answered_list]
    return clients_list

def ssh_connexion_unique(hostname, username, password):
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh_client.connect(hostname, username=username, password=password)
        ssh_client.close()
        return True
    except paramiko.AuthenticationException:
        return False
    except Exception as e:
        print(f"Erreur lors de la connexion : {e}")
        return False
    
def vérifier_versions_os(os_info):
    insecure_os = []
    for info in os_info:
        os_description = info["os"].lower()
        found_secure = any(secure in os_description for versions in Verison_OS_Secure.values() for secure in versions)
        found_insecure = any(insecure in os_description for versions in Verison_OS_Insecure.values() for insecure in versions)
        if found_insecure and not found_secure:
            insecure_os.append(info)
    return insecure_os



def analyser_resultats_nmap(nmap_output):
    port_info = []
    lines = nmap_output.split("\n")
    for line in lines:
        match = re.match(r"^(\d+/tcp)\s+open\s+(\w+)\s+(.*)", line)
        if match:
            port = match.group(1)
            service = match.group(2)
            version = match.group(3)
            port_info.append({"port": port, "service": service, "version": version})
    return port_info

def vérifier_versions_services(port_info):
    insecure_services = []
    for info in port_info:
        service = info["service"].lower()
        version = info["version"].lower()
        is_secure = any(secure_version in version for secure_version in Version_protocol_Secu.get(service, []))
        is_insecure = any(insecure_version in version for insecure_version in Version_protocol_NonSecu.get(service, []))
        if is_insecure or not is_secure:
            insecure_services.append(info)
    return insecure_services


def rechercher_ports(ip_address, ports="1-1024"):
    nmap_command = ["nmap", "-sV", "-p", ports, ip_address]
    result = subprocess.run(nmap_command, capture_output=True, text=True)
    if result.returncode != 0:
        raise Exception(f"Erreur lors de l'exécution de nmap: {result.stderr}")
    return result.stdout


def générer_rapport_sécurité(network_range):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", "B", size=20)
    pdf.set_text_color(255, 0, 0)
    output_pdf = "Rapport "+str(datetime.now().strftime('%Y-%m-%d %H-%M'))+".pdf"
    date_jour = "Date "+str(datetime.now().strftime('%Y-%m-%d %H:%M'))

    pdf.cell(200, 10, txt="Rapport de Sécurité du Réseau", ln=True, align='C')
    pdf.cell(200, 10, txt=date_jour, ln=True, align='C')
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="-----------------------------", ln=True, align='C')

    print(f">>> {Fore.BLUE}Analyse commencée .... {Style.RESET_ALL}")    
    clients = scanner_réseau(network_range)
    
    pdf.set_text_color(0, 0, 0)
    for client in clients:
        ip_address = client["ip"]
        pdf.set_font("Arial", "B", size=15)
        pdf.set_text_color(0, 240, 0)
        pdf.cell(200, 10, txt=f"Machine: {ip_address}", ln=True)
        print(f">>> {Fore.RED}Analyse en cours / Machine détectée Analyse ... {Style.RESET_ALL}")
        pdf.set_text_color(0, 0, 0)


        # Scan et analyse des services
        nmap_ports_output = rechercher_ports(ip_address)
        port_info = analyser_resultats_nmap(nmap_ports_output)
        insecure_services = vérifier_versions_services(port_info)
        pdf.set_font("Arial", "I", size=12)
        pdf.cell(200, 10, txt="Informations sur les ports ouverts:", ln=True)
        pdf.set_font("Arial", size=9)
        for info in port_info:
            pdf.cell(200, 10, txt=f"Port: {info['port']}, Service: {info['service']}, Version: {info['version']}", ln=True)

        if insecure_services:
            pdf.set_font("Arial", "I", size=12)
            pdf.cell(200, 10, txt="Services ou versions non sécurisés détectés:", ln=True)
            for svc in insecure_services:
                pdf.set_font("Arial", size=9)
                pdf.cell(200, 10, txt=f"Port: {svc['port']}, Service: {svc['service']}, Version: {svc['version']}", ln=True)

        
        # Scan et analyse des systèmes d'exploitation
        nmap_os_output = rechercher_os(ip_address)
        os_info = analyser_resultats_nmap_os(nmap_os_output)
        insecure_os = vérifier_versions_os(os_info)
        pdf.set_font("Arial", "I", size=12)
        pdf.cell(200, 10, txt="Informations sur le système d'exploitation:", ln=True)
        pdf.set_font("Arial", size=9)
        for info in os_info:
            pdf.cell(200, 10, txt=f"Système d'exploitation: {info['os']}", ln=True)

        if insecure_os:
            pdf.set_font("Arial", "I", size=12)
            pdf.cell(200, 10, txt="Systèmes d'exploitation non sécurisés:", ln=True)
            for os in insecure_os:
                pdf.set_font("Arial", size=9)
                pdf.cell(200, 10, txt=f"Système d'exploitation: {os['os']}", ln=True)
        
        pdf.set_font("Arial", size=12)
        pdf.cell(200, 10, txt="-----------------------------", ln=True)

    pdf.output(output_pdf)
    
    
Verison_OS_Secure = {
    "windows": ["windows 10", "windows 11"],
    "linux": ["ubuntu 20.04", "ubuntu 22.04", "debian 10", "debian 11", "rhel 8", "centos 8"],
    "macos": ["macos monterey", "macos ventura"],
}

Verison_OS_Insecure = {
    "windows": ["windows xp", "windows vista", "windows 7"],
    "linux": ["ubuntu 18.04", "ubuntu 16.04", "debian 9", "centos 7"],
    "macos": ["macos mojave", "macos high sierra"],
}

Version_protocol_Secu = {
    "ftp": ["ftps", "sftp"],
    "ssh": ["ssh-2"],
    "http": ["http/2", "http/1.1"],
    "https": ["tls 1.2", "tls 1.3"],
    "smtp": ["smtps", "smtp avec starttls"],
    "imap": ["imap avec starttls", "imap/ssl"],
    "pop3": ["pop3 avec starttls", "pop3/ssl"],
    "rdp": ["rdp avec nla"],
}

Version_protocol_NonSecu = {
    "ftp": ["ftp sans chiffrement"],
    "ssh": ["ssh-1"],
    "http": ["http/1.0"],
    "https": ["ssl 3.0", "tls 1.0", "tls 1.1"],
    "smtp": ["smtp sans chiffrement"],
    "imap": ["imap sans chiffrement"],
    "pop3": ["pop3 sans chiffrement"],
    "telnet": ["telnet"],
    "rdp": ["rdp sans nla"],
}
